// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Achievement struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
}

type AuthenticateUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AuthenticateUserOutput struct {
	Jwt   *string `json:"jwt,omitempty"`
	Error *Error  `json:"error,omitempty"`
}

type FinishGameInput struct {
	RoomID     string `json:"RoomId"`
	FromUserID int    `json:"FromUserId"`
}

type FinishGameOutput struct {
	RoomID     string `json:"RoomId"`
	WinnerID   int    `json:"WinnerId"`
	ResultText string `json:"ResultText"`
}

type GameStatus struct {
	RoomID   string    `json:"RoomId"`
	Status   string    `json:"Status"`
	WinnerID *int      `json:"WinnerId,omitempty"`
	StartAt  time.Time `json:"StartAt"`
	FinishAt time.Time `json:"FinishAt"`
}

type GameStatusInput struct {
	RoomID string `json:"RoomId"`
}

type GameStatusOutput struct {
	GameStatus *GameStatus `json:"GameStatus"`
}

type GetAllUsersInput struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

type GetAllUsersOutput struct {
	Users []*User `json:"users"`
	Error *Error  `json:"error,omitempty"`
}

type GetGamesStatsInput struct {
	UserID int `json:"userId"`
}

type GetGamesStatsOutput struct {
	GamesAmount     int                `json:"gamesAmount"`
	WinsAmount      int                `json:"winsAmount"`
	WinsPercents    float64            `json:"winsPercents"`
	MetaTopicsStats []*MetaTopicsStats `json:"metaTopicsStats,omitempty"`
	Error           *Error             `json:"error,omitempty"`
}

type GetMetatopicsInput struct {
	PageSize   int `json:"pageSize"`
	PageNumber int `json:"pageNumber"`
}

type GetMetatopicsOutput struct {
	PageSize   int          `json:"pageSize"`
	PageNumber int          `json:"pageNumber"`
	PageCount  int          `json:"pageCount"`
	Metatopics []*Metatopic `json:"metatopics"`
}

type GetTopicInput struct {
	ID int `json:"id"`
}

type GetTopicOutput struct {
	Topic *TopicMetatopics `json:"topic,omitempty"`
	Error *Error           `json:"error,omitempty"`
}

type GetTopicsInput struct {
	PageSize    int           `json:"pageSize"`
	PageNumber  int           `json:"pageNumber"`
	TopicStatus []TopicStatus `json:"topicStatus"`
}

type GetTopicsOutput struct {
	PageSize   int                `json:"pageSize"`
	PageNumber int                `json:"pageNumber"`
	PageCount  int                `json:"pageCount"`
	Topics     []*TopicMetatopics `json:"topics"`
}

type GetUserInput struct {
	ID int `json:"id"`
}

type GetUserOutput struct {
	User  *User  `json:"user,omitempty"`
	Error *Error `json:"error,omitempty"`
}

type MetaTopicsStats struct {
	MetaTopic    string  `json:"metaTopic"`
	GamesAmount  int     `json:"gamesAmount"`
	WinsAmount   int     `json:"winsAmount"`
	WinsPercents float64 `json:"winsPercents"`
}

type Metatopic struct {
	ID        int       `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

type Mutation struct {
}

type Query struct {
}

type RecoveryPasswordInput struct {
	Email string `json:"email"`
}

type RecoveryPasswordOutput struct {
	Error *Error `json:"error,omitempty"`
}

type RegisterUserInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RegisterUserOutput struct {
	User  *User   `json:"user,omitempty"`
	Jwt   *string `json:"jwt,omitempty"`
	Error *Error  `json:"error,omitempty"`
}

type ResetPasswordInput struct {
	Code     string `json:"code"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type ResetPasswordOutput struct {
	Error *Error `json:"error,omitempty"`
}

type StartGameInput struct {
	RoomID     string `json:"RoomId"`
	FromUserID int    `json:"FromUserId"`
}

type StartGameOutput struct {
	GameStatus *GameStatus `json:"GameStatus"`
}

type SuggestTopicInput struct {
	Name string `json:"name"`
}

type SuggestTopicOutput struct {
	Topic *Topic `json:"topic,omitempty"`
	Error *Error `json:"error,omitempty"`
}

type Topic struct {
	ID        int         `json:"id"`
	Name      string      `json:"name"`
	Status    TopicStatus `json:"status"`
	CreatedAt time.Time   `json:"createdAt"`
}

type TopicInput struct {
	ID           int         `json:"id"`
	Name         string      `json:"name"`
	Status       TopicStatus `json:"status"`
	MetatopicIds []int       `json:"metatopicIds"`
}

type TopicMetatopics struct {
	Topic      *Topic       `json:"topic"`
	Metatopics []*Metatopic `json:"metatopics"`
}

type UpdateEmailInput struct {
	ID       int    `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdateEmailOutput struct {
	Error *Error `json:"error,omitempty"`
}

type UpdatePasswordInput struct {
	ID          int    `json:"id"`
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type UpdatePasswordOutput struct {
	Error *Error `json:"error,omitempty"`
}

type UpdateTopicInput struct {
	Topics []*TopicInput `json:"topics"`
}

type UpdateTopicOutput struct {
	TopicMetatopics []*TopicMetatopics `json:"topicMetatopics,omitempty"`
	Error           *Error             `json:"error,omitempty"`
}

type UpdateUserInput struct {
	ID       int     `json:"id"`
	Username *string `json:"username,omitempty"`
	ImageID  *int    `json:"imageId,omitempty"`
	Password *string `json:"password,omitempty"`
	Email    *string `json:"email,omitempty"`
}

type UpdateUserOutput struct {
	User  *User  `json:"user"`
	Error *Error `json:"error,omitempty"`
}

type User struct {
	ID        int       `json:"id"`
	Role      Role      `json:"role"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	ImageURL  string    `json:"imageUrl"`
}

type UserAchievementsInput struct {
	UserID int `json:"userId"`
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

type UserAchievementsOutput struct {
	Achievements []*Achievement `json:"achievements"`
	Error        *Error         `json:"error,omitempty"`
}

type VerifyRecoveryCodeInput struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

type VerifyRecoveryCodeOutput struct {
	Error *Error `json:"error,omitempty"`
}

// Чтобы понять какая придёт, смотри описание метода API
type Error string

const (
	ErrorNotFound           Error = "NOT_FOUND"
	ErrorValidation         Error = "VALIDATION"
	ErrorInvalidCredentials Error = "INVALID_CREDENTIALS"
	ErrorAlreadyExist       Error = "ALREADY_EXIST"
	ErrorUnauthorized       Error = "UNAUTHORIZED"
)

var AllError = []Error{
	ErrorNotFound,
	ErrorValidation,
	ErrorInvalidCredentials,
	ErrorAlreadyExist,
	ErrorUnauthorized,
}

func (e Error) IsValid() bool {
	switch e {
	case ErrorNotFound, ErrorValidation, ErrorInvalidCredentials, ErrorAlreadyExist, ErrorUnauthorized:
		return true
	}
	return false
}

func (e Error) String() string {
	return string(e)
}

func (e *Error) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Error(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Error", str)
	}
	return nil
}

func (e Error) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser           Role = "USER"
	RoleContentManager Role = "CONTENT_MANAGER"
	RoleAdmin          Role = "ADMIN"
)

var AllRole = []Role{
	RoleUser,
	RoleContentManager,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleContentManager, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TopicStatus string

const (
	TopicStatusPending  TopicStatus = "PENDING"
	TopicStatusApproved TopicStatus = "APPROVED"
	TopicStatusDeclined TopicStatus = "DECLINED"
)

var AllTopicStatus = []TopicStatus{
	TopicStatusPending,
	TopicStatusApproved,
	TopicStatusDeclined,
}

func (e TopicStatus) IsValid() bool {
	switch e {
	case TopicStatusPending, TopicStatusApproved, TopicStatusDeclined:
		return true
	}
	return false
}

func (e TopicStatus) String() string {
	return string(e)
}

func (e *TopicStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TopicStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TopicStatus", str)
	}
	return nil
}

func (e TopicStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
